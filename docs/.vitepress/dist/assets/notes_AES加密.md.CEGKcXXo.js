import{_ as i,c as a,a2 as e,o as t}from"./chunks/framework.Dz7_3PEu.js";const E=JSON.parse('{"title":"CryptoJS","description":"","frontmatter":{},"headers":[],"relativePath":"notes/AES加密.md","filePath":"notes/AES加密.md","lastUpdated":null}'),p={name:"notes/AES加密.md"};function n(h,s,l,k,d,r){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="cryptojs" tabindex="-1">CryptoJS <a class="header-anchor" href="#cryptojs" aria-label="Permalink to &quot;CryptoJS&quot;">​</a></h1><p>CryptoJS是一个JavaScript的加解密的工具包。它支持多种的算法：<code>MD5、SHA1、SHA2、SHA3、RIPEMD-160 哈希散列</code>，进行 <code>AES、DES、Rabbit、RC4、Triple DES</code> 加解密.</p><h2 id="散列算法" tabindex="-1">散列算法 <a class="header-anchor" href="#散列算法" aria-label="Permalink to &quot;散列算法&quot;">​</a></h2><h3 id="md5" tabindex="-1">MD5 <a class="header-anchor" href="#md5" aria-label="Permalink to &quot;MD5&quot;">​</a></h3><p><code>MD5</code>是被广泛使用的散列函数。它被应用于各种安全应用，通常也可以校验文件的完整性。但<code>MD5</code>不耐碰撞攻击，因此不适用于SSL证书或数字签名。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MD5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出一个obj</span></span></code></pre></div><p>toString()方法转换</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">MD5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Message&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(mode.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">());</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4c2a8fe7eaf24721cc7a9f0175115bd4</span></span></code></pre></div><h2 id="加密" tabindex="-1">加密 <a class="header-anchor" href="#加密" aria-label="Permalink to &quot;加密&quot;">​</a></h2><h3 id="加密算法" tabindex="-1">加密算法 <a class="header-anchor" href="#加密算法" aria-label="Permalink to &quot;加密算法&quot;">​</a></h3><p>加密函数的参数是：(明文字符串, 密钥字符串，可选参数对象)，返回密文字符串。 加密函数是：<code>Cryptojs.AES.encrypt</code>，<code>Cryptojs.DES.encrypt</code>，<code>Cryptojs.Rabbit.encrypt</code>，<code>Cryptojs.RC4.encrypt</code>，<code>Cryptojs.TripleDES.encrypt</code></p><p>解密函数的参数是：(密文字符串, 密钥字符串，可选参数对象)，返回的结果必须用<code>.toString(CryptoJS.enc.Utf8)</code>转为明文。</p><p>解密函数是:<code>CryptoJS.AES.decrypt</code>，<code>CryptoJS.DES.decrypt</code>，<code>CryptoJS.Rabbit.decrypt</code>，<code>CryptoJS.RC4.decrypt</code>，<code>CryptoJS.TripleDES.decrypt</code></p><p>参数</p><p>encrypt(message,secret,obj);</p><p>可选参数对象常用属性</p><p>obj:<code>{mode,paddig,vi,formatter}</code></p><ul><li>mode:加密模式。<code>CBC</code>,<code>ECB</code>,<code>CFB</code>,<code>OFB</code>,<code>CTR</code></li><li></li><li>paddig:填充方式。<code>NoPadding</code>,<code>ZeroPadding</code>,<code>Pkcs7(Pkcs5)</code>,<code>Iso10126</code>,<code>Iso97971</code>,<code>AnsiX923</code></li><li></li><li>vi:偏移量</li><li></li><li>formatter：自定义格式</li></ul><p>应用：</p><h3 id="aes" tabindex="-1">AES <a class="header-anchor" href="#aes" aria-label="Permalink to &quot;AES&quot;">​</a></h3><p>例如：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加密</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// CryptoJS.AES.encrypt(message, secret,{});</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> encrypted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">encrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message 123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode:CryptoJS.mode.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CBC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  padding:CryptoJS.pad.Pkcs7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 解密</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> decrypted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> CryptoJS.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AES</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">decrypt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;message 123&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;secret&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  mode:CryptoJS.mode.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CBC</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  padding:CryptoJS.pad.Pkcs7</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(decrypted.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(CryptoJS.enc.Utf8));</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//message 123</span></span></code></pre></div><p>参考文档：<a href="https://github.com/xiaohuiguo/CryptoJS-guide-cn" target="_blank" rel="noreferrer">git地址</a></p>`,23)]))}const c=i(p,[["render",n]]);export{E as __pageData,c as default};
